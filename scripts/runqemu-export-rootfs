#!/bin/bash
#
# Copyright (c) 2005-2009 Wind River Systems, Inc.
#
# SPDX-License-Identifier: GPL-2.0-only
#

usage() {
	echo "Usage: [-fip] $0 {start|stop|restart} <export-dir>"
	echo ''
	echo 'you can specify via env or option'
	echo 'env         option'
	echo 'FS          -f      exported file system (default: nfs)'
	echo 'INSTANCE    -i      instance'
	echo 'PORT        -p      port to listen on (default: 3048 + $INSTANCE)'
}

while getopts "f:p:" o; do
	case "${o}" in
		i)
			INSTANCE=$OPTARG
			;;
		p)
			PORT=$OPTARG
			;;
		f)
			FS=$OPTARG
			;;
		*)
			usage
			;;
	esac
done
shift $((OPTIND-1))

if [ $# != 2 ]; then
	usage
	exit 1
fi

if [ ! -d "$2" ]; then
	echo "Error: '$2' does not exist"
	usage
	exit 1
fi

# Ensure the export-dir is an absolute path
EXPORT_DIR=$(cd "$2" && pwd)

SYSROOT_SETUP_SCRIPT=`which oe-find-native-sysroot 2> /dev/null`
if [ -z "$SYSROOT_SETUP_SCRIPT" ]; then
	echo "Error: Unable to find the oe-find-native-sysroot script"
	echo "Did you forget to source your build environment setup script?"
	exit 1
fi
. $SYSROOT_SETUP_SCRIPT qemu-helper-native

# Parameter defaults
FS=${FS:-nfs}
INSTANCE=${INSTANCE:-0}
PORT=${PORT:=$[ 3048 + $INSTANCE ]}
PIDFILE=~/.runqemu-sdk/$FS$INSTANCE.pid

### namespace: nfs ###

if [ -n "${NFS_INSTANCE}${NFSD_PORT}${MOUNTD_PORT}" ]; then
	echo "Error: Variables NFS_INSTANCE/NFSD_PORT/MOUNTD_PORT " \
	     "have been replaced by INSTANCE/PORT/PORT command line arguments."
	usage
	exit 1
fi

EXPORTS=~/.runqemu-sdk/exports$INSTANCE
RMTAB=~/.runqemu-sdk/rmtab$INSTANCE
MOUNTPID=~/.runqemu-sdk/mount$INSTANCE.pid

VAR_nfs_SERVER="$OECORE_NATIVE_SYSROOT/usr/bin/unfsd"
VAR_nfs_ROOTOPTS="nfsroot=IP_ADDRESS:$EXPORT_DIR,nfsvers=3,port=$PORT,udp,mountport=$PORT"

## For debugging you would additionally add
## --debug all
UNFSD_OPTS="-p -i $PIDFILE -e $EXPORTS -n $PORT -m $PORT"

do_nfs_prep () {
	echo "Creating exports file..."
	echo "$EXPORT_DIR (rw,no_root_squash,no_all_squash,insecure)" > $EXPORTS
}

do_nfs_start () {
	echo "Starting User Mode nfsd"
	echo "  $PSEUDO $PSEUDO_OPTS $VAR_nfs_SERVER $UNFSD_OPTS"
	$PSEUDO $PSEUDO_OPTS $VAR_nfs_SERVER $UNFSD_OPTS
	if [ ! $? = 0 ]; then
		echo "Error starting nfsd"
		exit 1
	fi
}

do_nfs_unprep() {
	if [ -f "$EXPORTS" ]; then
		echo "Removing exports file"
		rm -f $EXPORTS
	fi
}

### namespace: 9p ###
#

# FIXME no native recipe yet
VAR_9p_SERVER="/sbin/diod"
VAR_9p_ROOTOPTS="root=IP_ADDRESS rootfstype=9p rootflags=trans=tcp,cache=loose,uname=root,access=0,dfltuid=0,dfltgid=0,aname=$EXPORT_DIR"

## For debugging you would additionally add
## -d 1
DIOD_OPTS="-c /dev/null -f -n -N -U 0 -l 0.0.0.0:$PORT -e $EXPORT_DIR"

do_9p_start () {
	echo "Starting diod"
	echo "  $PSEUDO $PSEUDO_OPTS $VAR_9p_SERVER $DIOD_OPTS"
	setsid $PSEUDO $PSEUDO_OPTS $VAR_9p_SERVER $DIOD_OPTS &
	local PGID=$!
	disown
	if [ ! $? = 0 ]; then
		echo "Error starting diod"
		exit 1
	fi
	echo $(ps -s $PGID -o pid=) > $PIDFILE
}

### generic code ###

SERVERPATH="VAR_${FS}_SERVER"
if [ -z "${!SERVERPATH}" ]; then
	echo "Error: unsupported file system '$FS'"
	usage
	exit 1
fi

if [ ! -e "${!SERVERPATH}" ]; then
	echo "Error: ${!SERVERPATH} not found"

	echo "This shouldn't happen - something is missing from your toolchain installation"
	exit 1
fi

SERVERNAME=$(basename ${!SERVERPATH})

if [ ! -d ~/.runqemu-sdk ]; then
	mkdir -p ~/.runqemu-sdk
fi

PSEUDO_OPTS="-P $OECORE_NATIVE_SYSROOT/usr"
PSEUDO_LOCALSTATEDIR="$EXPORT_DIR/../$(basename $EXPORT_DIR).pseudo_state"
export PSEUDO_LOCALSTATEDIR

if [ ! -d "$PSEUDO_LOCALSTATEDIR" ]; then
	echo "Error: $PSEUDO_LOCALSTATEDIR does not exist."
	echo "Did you create the export directory using runqemu-extract-sdk?"
	exit 1
fi

fs_call () {
	command_func="do_${FS}_${1}"
	if ! declare -F | grep " ${command_func}$" &>/dev/null; then
		return 3 # indicates a bug during addition of new FS
	fi

	shift

	"${command_func}" "$@"
}

# See how we were called.
case "$1" in
	start)
		fs_call prep
		fs_call start || exit 3

		# Check to make sure everything started ok.
		if [ ! -f $PIDFILE ]; then
			echo "$SERVERNAME did not start correctly"
			exit 1
		fi
		ps -fp `cat $PIDFILE` > /dev/null 2> /dev/null
		if [ ! $? = 0 ]; then
			echo "$SERVERNAME did not start correctly"
			exit 1
		fi
		echo " "
		echo "On your target please remember to add the following options:"
		ROOTOPTS="VAR_${FS}_ROOTOPTS"
		echo "${!ROOTOPTS}"
		;;

	stop)
		if [ -f "$PIDFILE" ]; then
			echo "Stopping $SERVERNAME"
			kill `cat $PIDFILE`
			rm -f $PIDFILE
		else
			echo "No PID file, not stopping $SERVERNAME"
		fi

		fs_call unprep
	;;

	restart)
		$0 stop $EXPORT_DIR
		$0 start $EXPORT_DIR
		if [ ! $? = 0 ]; then
		exit 1
		fi
		;;
	*)
		usage
		;;
esac

exit 0
